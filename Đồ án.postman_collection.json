{
	"info": {
		"_postman_id": "39118a1c-e28a-4236-a9e8-e5d0d35877a6",
		"name": "Đồ án",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20957393"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"sex\", (Math.random()>=0.5)? 1 : 0);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"type response is success\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"let req = JSON.parse(pm.request.body.raw)\r",
									"pm.collectionVariables.set(\"username\", req.username);\r",
									"pm.collectionVariables.set(\"password\", req.password);\r",
									"\r",
									"let loop_create_user = Number(pm.collectionVariables.get(\"count\"))\r",
									"if(loop_create_user > 0)\r",
									"{\r",
									"    loop_create_user-=1\r",
									"    pm.collectionVariables.set(\"count\", loop_create_user);\r",
									"    console.log(loop_create_user)\r",
									"    postman.setNextRequest(\"register\");\r",
									"}\r",
									"else {\r",
									"    pm.collectionVariables.set(\"count\", 20);\r",
									"    postman.setNextRequest(\"login\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomUserName}}\",\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345678\",\r\n    \"role\": \"user\",\r\n    \"sex\": {{sex}},\r\n    \"image\": \"\",\r\n    \"address\": \"{{$randomStreetAddress}}\",\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"bank\": \"{{$randomBankAccount}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"type response is success\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"response token not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"accessToken\", jsonData.data.accessToken);\r",
									"    pm.expect(jsonData.data.accessToken).not.empty\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"console.log(pm.collectionVariables.get(\"username\"))\r",
									"console.log(pm.collectionVariables.get(\"password\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"admin\",\r\n    \"password\":\"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "get list user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"have type success\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"user_ids\",jsonData.data.map(item => item.id).toString());\r",
									"    pm.expect(jsonData.type).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"have type success\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.length).greaterThan(15)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "book api",
			"item": [
				{
					"name": "create book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test status of response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"id_book_detail\", JSON.parse(pm.request.body.raw).id);\r",
									"let loop_create_user = Number(pm.collectionVariables.get(\"count\"))\r",
									"if(loop_create_user > 0)\r",
									"{\r",
									"    loop_create_user-=1\r",
									"    pm.collectionVariables.set(\"count\", loop_create_user);\r",
									"    console.log(loop_create_user)\r",
									"    postman.setNextRequest(\"create book\");\r",
									"}\r",
									"else {\r",
									"    pm.collectionVariables.set(\"count\", 20);\r",
									"    postman.setNextRequest('update');\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{$randomUUID}}\",\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"avatar\": \"{{$randomImageUrl}}\",\r\n    \"discounted\": {{$randomInt}},\r\n    \"price_import\": {{$randomPrice}},\r\n    \"price_export\": {{$randomPrice}},\r\n    \"sold\": {{$randomInt}},\r\n    \"views\": {{$randomInt}},\r\n    \"published_date\": \"{{$isoTimestamp}}\",\r\n    \"quantity\": {{$randomInt}},\r\n    \"publisher\": \"{{$randomFullName}}\",\r\n    \"author\": \"{{$randomFullName}}\",\r\n    \"description\": \"{{$randomLoremSentences}}\",\r\n    \"images\": [\r\n        \"{{$randomImageUrl}}\",\r\n        \"{{$randomImageUrl}}\",\r\n        \"{{$randomImageUrl}}\",\r\n        \"{{$randomImageUrl}}\",\r\n        \"{{$randomImageUrl}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/books",
							"host": [
								"{{host}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "get list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test status of response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Test leng of data in response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"book_ids\", jsonData.data.map(item => item.id).toString());\r",
									"\r",
									"    pm.collectionVariables.set(\"update_book_images\", jsonData.data[0].images[0].id);\r",
									"\r",
									"    pm.collectionVariables.set(\"id_book_detail\", jsonData.data[0].id);\r",
									"\r",
									"    pm.expect(jsonData.data.length).greaterThan(15);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/books",
							"host": [
								"{{host}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test status of response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"success\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"discounted\": {{$randomInt}},\r\n    \"price_import\": {{$randomPrice}},\r\n    \"price_export\": {{$randomPrice}},\r\n    \"sold\": {{$randomInt}},\r\n    \"views\": {{$randomInt}},\r\n    \"published_date\": \"{{$isoTimestamp}}\",\r\n    \"quantity\": {{$randomInt}},\r\n    \"publisher\": \"{{$randomFullName}}\",\r\n    \"author\": \"{{$randomFullName}}\",\r\n    \"description\": \"{{$randomLoremSentences}}\",\r\n    \"images\": [\r\n       {\r\n           \"id\":\"{{update_book_images}}\",\r\n           \"url\":\"{{$randomImageUrl}}\"\r\n       }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/books/{{id_book_detail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"{{id_book_detail}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test status of response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Test data of detail\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).not.empty\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/books/{{id_book_detail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"{{id_book_detail}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test status of response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Test status of response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.affected).to.eql(1);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/books/{{id_book_detail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"{{id_book_detail}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "rating",
			"item": [
				{
					"name": "create rating",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let book_ids = pm.collectionVariables.get(\"book_ids\").split(',')\r",
									"let user_ids = pm.collectionVariables.get(\"user_ids\").split(',')\r",
									"\r",
									"let book_id = book_ids.shift();\r",
									"let user_id = user_ids.shift();\r",
									"\r",
									"pm.collectionVariables.set(\"book_id\", book_id);\r",
									"pm.collectionVariables.set(\"book_ids\", book_ids.toString());\r",
									"\r",
									"pm.collectionVariables.set(\"user_id\", user_id);\r",
									"pm.collectionVariables.set(\"user_ids\", user_ids.toString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const user_id = pm.collectionVariables.get(\"user_id\");\r",
									"const book_id = pm.collectionVariables.get(\"book_id\");\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"success\");\r",
									"});\r",
									"if(user_id && book_id)\r",
									"{\r",
									"    postman.setNextRequest(\"create rating\");\r",
									"}\r",
									"else {\r",
									"    postman.setNextRequest(\"clear data\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\":\"{{user_id}}\",\r\n    \"book_id\":\"{{book_id}}\",\r\n    \"rating_number\":4,\r\n    \"content\":\"good\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/rating",
							"host": [
								"{{host}}"
							],
							"path": [
								"rating"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NTYwNTY1NDN9.HDrsViBq-DXtpa_bV89lQMkh1ogDm7eV4d_S3fIzEzo",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "clear data",
			"item": [
				{
					"name": "clear data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/test",
							"host": [
								"{{host}}"
							],
							"path": [
								"test"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "id_book",
			"value": ""
		},
		{
			"key": "user_ids",
			"value": ""
		},
		{
			"key": "book_ids",
			"value": ""
		},
		{
			"key": "book_id",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "id_book_detail",
			"value": ""
		},
		{
			"key": "count",
			"value": "",
			"type": "string"
		},
		{
			"key": "update_book_images",
			"value": ""
		}
	]
}